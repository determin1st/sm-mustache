
$_main:
     ; (lines=2, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:1-872
0000 DECLARE_CLASS string("sm\mustachecontext")
0001 RETURN int(1)

SM\Mustache::parseDelims:
     ; (lines=20, args=1, vars=2, tmps=2)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:36-41
0000 CV0($text) = RECV 1
0001 INIT_FCALL 3 128 string("preg_match")
0002 T2 = FETCH_STATIC_PROP_R string("DELIMS_EXP") (self) (exception)
0003 SEND_VAL T2 1
0004 SEND_VAR CV0($text) 2
0005 SEND_REF CV1($x) 3
0006 V2 = DO_ICALL
0007 JMPZ V2 0017
0008 INIT_STATIC_METHOD_CALL 1 string("SplFixedArray") string("fromArray")
0009 T3 = FETCH_DIM_R CV1($x) int(1)
0010 T2 = INIT_ARRAY 2 (packed) T3 NEXT
0011 T3 = FETCH_DIM_R CV1($x) int(3)
0012 T2 = ADD_ARRAY_ELEMENT T3 NEXT
0013 SEND_VAL T2 1
0014 V3 = DO_FCALL
0015 T2 = QM_ASSIGN V3
0016 JMP 0018
0017 T2 = QM_ASSIGN null
0018 VERIFY_RETURN_TYPE T2
0019 RETURN T2
LIVE RANGES:
     2: 0011 - 0013 (tmp/var)
     2: 0018 - 0019 (tmp/var)

SM\Mustache::construct:
     ; (lines=95, args=1, vars=2, tmps=2)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:43-75
0000 CV0($o) = RECV_INIT 1 array(...)
0001 T2 = FETCH_STATIC_PROP_R string("TEMPLATE") (self) (exception)
0002 T3 = FETCH_DIM_R T2 int(0)
0003 T2 = IS_NOT_IDENTICAL T3 string("f")
0004 JMPZ T2 0024
0005 INIT_FCALL 3 128 string("str_replace")
0006 SEND_VAL string("_") 1
0007 SEND_VAL string("\{\}\[\]\(\)\<\>\:%\=~\-_\?\*@\!\|") 2
0008 T2 = FETCH_STATIC_PROP_R string("DELIMS_EXP") (self) (exception)
0009 SEND_VAL T2 3
0010 V2 = DO_ICALL
0011 ASSIGN_STATIC_PROP string("DELIMS_EXP")
0012 OP_DATA V2
0013 INIT_FCALL 3 128 string("str_replace")
0014 SEND_VAL string("") 1
0015 SEND_VAL string("") 2
0016 INIT_FCALL 1 96 string("trim")
0017 T2 = FETCH_STATIC_PROP_R string("TEMPLATE") (self) (exception)
0018 SEND_VAL T2 1
0019 V2 = DO_ICALL
0020 SEND_VAR V2 3
0021 V2 = DO_ICALL
0022 ASSIGN_STATIC_PROP string("TEMPLATE")
0023 OP_DATA V2
0024 V2 = NEW 0 (self) (exception)
0025 DO_FCALL
0026 CV1($I) = QM_ASSIGN V2
0027 T2 = ISSET_ISEMPTY_DIM_OBJ (isset) CV0($o) string("logger")
0028 JMPZ T2 0037
0029 INIT_FCALL 1 96 string("is_callable")
0030 T2 = FETCH_DIM_R CV0($o) string("logger")
0031 SEND_VAL T2 1
0032 V2 = DO_ICALL
0033 JMPZ V2 0037
0034 T2 = FETCH_DIM_R CV0($o) string("logger")
0035 ASSIGN_OBJ CV1($I) string("logger")
0036 OP_DATA T2
0037 INIT_STATIC_METHOD_CALL 1 (self) (exception) string("parseDelims")
0038 T3 = FETCH_DIM_IS CV0($o) string("delims")
0039 T2 = COALESCE T3 0041
0040 T2 = QM_ASSIGN string("{{ }}")
0041 SEND_VAL T2 1
0042 V3 = DO_UCALL
0043 T2 = ASSIGN_OBJ CV1($I) string("delims")
0044 OP_DATA V3
0045 JMPNZ T2 0051
0046 INIT_METHOD_CALL 2 CV1($I) string("log")
0047 SEND_VAL_EX string("incorrect delimiters") 1
0048 SEND_VAL_EX int(1) 2
0049 DO_FCALL
0050 RETURN null
0051 T2 = ISSET_ISEMPTY_DIM_OBJ (isset) CV0($o) string("helper")
0052 JMPZ T2 0057
0053 V3 = FETCH_DIM_W CV0($o) string("helper")
0054 V2 = MAKE_REF V3
0055 ASSIGN_OBJ_REF CV1($I) string("helper")
0056 OP_DATA V2
0057 T2 = ISSET_ISEMPTY_DIM_OBJ (isset) CV0($o) string("escaper")
0058 JMPZ T2 0070
0059 INIT_FCALL 1 96 string("is_callable")
0060 T2 = FETCH_DIM_R CV0($o) string("escaper")
0061 SEND_VAL T2 1
0062 V2 = DO_ICALL
0063 JMPZ V2 0066
0064 T3 = FETCH_DIM_R CV0($o) string("escaper")
0065 JMP 0068
0066 T2 = FETCH_DIM_R CV0($o) string("escaper")
0067 T3 = BOOL T2
0068 T2 = QM_ASSIGN T3
0069 JMP 0071
0070 T2 = QM_ASSIGN bool(false)
0071 ASSIGN_OBJ CV1($I) string("escaper")
0072 OP_DATA T2
0073 T2 = ISSET_ISEMPTY_DIM_OBJ (isset) CV0($o) string("recur")
0074 JMPZ T2 0077
0075 T2 = FETCH_DIM_R CV0($o) string("recur")
0076 JMP 0078
0077 T2 = QM_ASSIGN bool(false)
0078 ASSIGN_OBJ CV1($I) string("recur")
0079 OP_DATA T2
0080 INIT_FCALL 3 128 string("array_fill")
0081 SEND_VAL int(0) 1
0082 SEND_VAL int(65536) 2
0083 SEND_VAL null 3
0084 V2 = DO_ICALL
0085 ASSIGN_OBJ CV1($I) string("cache")
0086 OP_DATA V2
0087 ASSIGN_OBJ CV1($I) string("hash")
0088 OP_DATA array(...)
0089 ASSIGN_OBJ CV1($I) string("text")
0090 OP_DATA array(...)
0091 ASSIGN_OBJ CV1($I) string("func")
0092 OP_DATA array(...)
0093 VERIFY_RETURN_TYPE CV1($I)
0094 RETURN CV1($I)
LIVE RANGES:
     2: 0025 - 0026 (new)
     2: 0044 - 0045 (tmp/var)

SM\Mustache::__construct:
     ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:77-78
0000 RETURN null

SM\Mustache::__debugInfo:
     ; (lines=3, args=0, vars=0, tmps=2)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:80-85
0000 T1 = FETCH_OBJ_R THIS string("total")
0001 T0 = INIT_ARRAY 1 T1 string("total")
0002 RETURN T0

SM\Mustache::log:
     ; (lines=9, args=2, vars=3, tmps=0)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:87-90
0000 CV0($text) = RECV 1
0001 CV1($level) = RECV_INIT 2 int(0)
0002 CV2($log) = FETCH_OBJ_R THIS string("logger")
0003 JMPZ CV2($log) 0008
0004 INIT_DYNAMIC_CALL 2 CV2($log)
0005 SEND_VAR_EX CV0($text) 1
0006 SEND_VAR_EX CV1($level) 2
0007 DO_FCALL
0008 RETURN null

SM\Mustache::render:
     ; (lines=92, args=3, vars=6, tmps=2)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:92-145
0000 CV0($text) = RECV 1
0001 CV1($p1) = RECV 2
0002 CV2($p2) = RECV_INIT 3 null
0003 T7 = STRLEN CV0($text)
0004 T6 = IS_SMALLER T7 int(5)
0005 JMPZ T6 0008
0006 VERIFY_RETURN_TYPE CV0($text)
0007 RETURN CV0($text)
0008 T6 = TYPE_CHECK (null) CV2($p2)
0009 JMPZ T6 0014
0010 CV2($p2) = QM_ASSIGN CV1($p1)
0011 T6 = FETCH_OBJ_R THIS string("delims")
0012 ASSIGN CV1($p1) T6
0013 JMP 0027
0014 T6 = TYPE_CHECK (string) CV1($p1)
0015 JMPZ T6 0021
0016 INIT_STATIC_METHOD_CALL 1 (self) (exception) string("parseDelims")
0017 SEND_VAR CV1($p1) 1
0018 V7 = DO_UCALL
0019 ASSIGN CV1($p1) V7
0020 JMPNZ CV1($p1) 0027
0021 INIT_METHOD_CALL 2 THIS string("log")
0022 SEND_VAL string("incorrect delimiters") 1
0023 SEND_VAL int(1) 2
0024 DO_FCALL
0025 VERIFY_RETURN_TYPE CV0($text)
0026 RETURN CV0($text)
0027 INIT_FCALL 2 112 string("strpos")
0028 SEND_VAR CV0($text) 1
0029 T6 = FETCH_DIM_R CV1($p1) int(0)
0030 SEND_VAL T6 2
0031 V7 = DO_ICALL
0032 T6 = TYPE_CHECK (false) V7
0033 JMPZ T6 0036
0034 VERIFY_RETURN_TYPE CV0($text)
0035 RETURN CV0($text)
0036 CV3($n) = FETCH_OBJ_R THIS string("total")
0037 T6 = IS_SMALLER_OR_EQUAL int(1000) CV3($n)
0038 JMPZ T6 0045
0039 INIT_METHOD_CALL 2 THIS string("log")
0040 SEND_VAL string("cache overflow") 1
0041 SEND_VAL int(1) 2
0042 DO_FCALL
0043 VERIFY_RETURN_TYPE CV0($text)
0044 RETURN CV0($text)
0045 INIT_METHOD_CALL 2 THIS string("renderFunc")
0046 SEND_VAR CV1($p1) 1
0047 SEND_REF CV0($text) 2
0048 V6 = DO_FCALL
0049 CV4($i) = QM_ASSIGN V6
0050 T6 = BW_NOT CV4($i)
0051 JMPZ T6 0065
0052 T7 = FETCH_OBJ_R THIS string("func")
0053 T6 = FETCH_DIM_R T7 CV4($i)
0054 INIT_DYNAMIC_CALL 1 T6
0055 V6 = NEW 3 string("SM\MustacheContext")
0056 V7 = FETCH_THIS
0057 SEND_VAR_EX V7 1
0058 SEND_VAR_EX CV1($p1) 2
0059 SEND_VAR_EX CV2($p2) 3
0060 DO_FCALL
0061 SEND_VAR_NO_REF_EX V6 1
0062 V7 = DO_FCALL
0063 T6 = QM_ASSIGN V7
0064 JMP 0066
0065 T6 = QM_ASSIGN string("")
0066 CV5($x) = QM_ASSIGN T6
0067 T6 = IS_IDENTICAL CV4($i) int(-1)
0068 JMPNZ T6 0072
0069 T7 = FETCH_OBJ_R THIS string("delims")
0070 T6 = IS_NOT_IDENTICAL CV1($p1) T7
0071 JMPZ T6 0090
0072 T7 = FETCH_OBJ_R THIS string("total")
0073 T6 = SUB T7 int(1)
0074 ASSIGN CV4($i) T6
0075 JMP 0086
0076 V6 = FETCH_OBJ_W (dim write) THIS string("text")
0077 ASSIGN_DIM V6 CV4($i)
0078 OP_DATA null
0079 V6 = FETCH_OBJ_W (dim write) THIS string("func")
0080 ASSIGN_DIM V6 CV4($i)
0081 OP_DATA null
0082 V6 = FETCH_OBJ_W (dim write) THIS string("hash")
0083 ASSIGN_DIM V6 CV4($i)
0084 OP_DATA null
0085 PRE_DEC CV4($i)
0086 T6 = IS_SMALLER_OR_EQUAL CV3($n) CV4($i)
0087 JMPNZ T6 0076
0088 ASSIGN_OBJ THIS string("total")
0089 OP_DATA CV3($n)
0090 VERIFY_RETURN_TYPE CV5($x)
0091 RETURN CV5($x)
LIVE RANGES:
     6: 0056 - 0061 (new)

SM\Mustache::renderFunc:
     ; (lines=86, args=4, vars=7, tmps=4)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:147-185
0000 CV0($delims) = RECV 1
0001 CV1($text) = RECV 2
0002 CV2($tree) = RECV_INIT 3 null
0003 CV3($depth) = RECV_INIT 4 int(-1)
0004 T8 = FETCH_OBJ_R THIS string("delims")
0005 T7 = IS_IDENTICAL CV0($delims) T8
0006 JMPZ T7 0021
0007 INIT_FCALL 3 128 string("hash")
0008 SEND_VAL string("md4") 1
0009 SEND_VAR CV1($text) 2
0010 SEND_VAL bool(true) 3
0011 V7 = DO_ICALL
0012 ASSIGN CV4($k) V7
0013 INIT_METHOD_CALL 1 THIS string("cacheGet")
0014 SEND_VAR CV4($k) 1
0015 V7 = DO_FCALL
0016 T8 = ASSIGN CV5($i) V7
0017 T7 = TYPE_CHECK TYPE [bool, long, double, string, array, object, resource] T8
0018 JMPZ T7 0022
0019 VERIFY_RETURN_TYPE CV5($i)
0020 RETURN CV5($i)
0021 ASSIGN CV4($k) null
0022 T7 = TYPE_CHECK (null) CV2($tree)
0023 JMPZ T7 0037
0024 INIT_METHOD_CALL 2 THIS string("tokenize")
0025 SEND_VAR CV0($delims) 1
0026 SEND_REF CV1($text) 2
0027 V7 = DO_FCALL
0028 ASSIGN_REF (function) CV2($tree) V7
0029 INIT_METHOD_CALL 2 THIS string("parse")
0030 SEND_REF CV1($text) 1
0031 SEND_REF CV2($tree) 2
0032 V7 = DO_FCALL
0033 V8 = ASSIGN_REF (function) CV2($tree) V7
0034 T7 = TYPE_CHECK (null) V8
0035 JMPZ T7 0037
0036 RETURN int(-1)
0037 INIT_METHOD_CALL 3 THIS string("compose")
0038 SEND_VAR CV0($delims) 1
0039 SEND_REF CV2($tree) 2
0040 T7 = PRE_INC CV3($depth)
0041 SEND_VAL T7 3
0042 V7 = DO_FCALL
0043 ASSIGN CV6($f) V7
0044 T7 = FETCH_OBJ_R THIS string("total")
0045 ASSIGN CV5($i) T7
0046 INIT_FCALL 4 144 string("sprintf")
0047 T7 = FETCH_STATIC_PROP_R string("TEMPLATE") (self) (exception)
0048 SEND_VAL T7 1
0049 SEND_VAR CV5($i) 2
0050 SEND_VAR CV3($depth) 3
0051 SEND_VAR CV6($f) 4
0052 V7 = DO_ICALL
0053 ASSIGN CV6($f) V7
0054 T9 = ROPE_INIT 3 string("return (")
0055 T9 = ROPE_ADD 1 T9 CV6($f)
0056 T8 = ROPE_END 2 T9 string(");")
0057 V7 = INCLUDE_OR_EVAL (eval) T8
0058 V8 = FETCH_OBJ_W (dim write) THIS string("func")
0059 ASSIGN_DIM V8 CV5($i)
0060 OP_DATA V7
0061 V7 = FETCH_OBJ_W (dim write) THIS string("text")
0062 ASSIGN_DIM V7 CV5($i)
0063 OP_DATA CV1($text)
0064 V7 = FETCH_OBJ_W (dim write) THIS string("hash")
0065 ASSIGN_DIM V7 CV5($i)
0066 OP_DATA CV4($k)
0067 T7 = ADD CV5($i) int(1)
0068 ASSIGN_OBJ THIS string("total")
0069 OP_DATA T7
0070 JMPZ CV4($k) 0081
0071 INIT_METHOD_CALL 2 THIS string("log")
0072 SEND_VAR CV6($f) 1
0073 SEND_VAL int(0) 2
0074 DO_FCALL
0075 JMPZ CV4($k) 0081
0076 INIT_METHOD_CALL 2 THIS string("cacheSet")
0077 SEND_VAR CV4($k) 1
0078 SEND_VAR CV5($i) 2
0079 V7 = DO_FCALL
0080 JMPZ V7 0083
0081 T7 = QM_ASSIGN CV5($i)
0082 JMP 0084
0083 T7 = QM_ASSIGN int(-1)
0084 VERIFY_RETURN_TYPE T7
0085 RETURN T7
LIVE RANGES:
     9: 0054 - 0056 (rope)
     7: 0058 - 0059 (tmp/var)
     7: 0084 - 0085 (tmp/var)

SM\Mustache::cacheGet:
     ; (lines=30, args=1, vars=4, tmps=3)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:187-201
0000 CV0($k) = RECV 1
0001 INIT_FCALL 1 96 string("ord")
0002 T4 = FETCH_DIM_R CV0($k) int(1)
0003 SEND_VAL T4 1
0004 V4 = DO_ICALL
0005 T5 = SL V4 int(8)
0006 INIT_FCALL 1 96 string("ord")
0007 T4 = FETCH_DIM_R CV0($k) int(0)
0008 SEND_VAL T4 1
0009 V6 = DO_ICALL
0010 CV1($y) = ADD V6 T5
0011 T5 = FETCH_OBJ_R THIS string("cache")
0012 CV2($x) = FETCH_DIM_R T5 CV1($y)
0013 CV3($i) = QM_ASSIGN int(2)
0014 JMP 0026
0015 T4 = TYPE_CHECK (null) CV2($x)
0016 JMPNZ T4 0028
0017 T4 = TYPE_CHECK (long) CV2($x)
0018 JMPNZ T4 0028
0019 INIT_FCALL 1 96 string("ord")
0020 T4 = FETCH_DIM_R CV0($k) CV3($i)
0021 SEND_VAL T4 1
0022 V5 = DO_ICALL
0023 T4 = FETCH_DIM_R CV2($x) V5
0024 ASSIGN CV2($x) T4
0025 PRE_INC CV3($i)
0026 T4 = IS_SMALLER CV3($i) int(16)
0027 JMPNZ T4 0015
0028 VERIFY_RETURN_TYPE CV2($x)
0029 RETURN CV2($x)

SM\Mustache::cacheSet:
     ; (lines=61, args=2, vars=8, tmps=3)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:203-240
0000 CV0($k) = RECV 1
0001 CV1($ki) = RECV 2
0002 V8 = FETCH_OBJ_W (ref) THIS string("cache")
0003 ASSIGN_REF CV2($z) V8
0004 INIT_FCALL 1 96 string("ord")
0005 T8 = FETCH_DIM_R CV0($k) int(1)
0006 SEND_VAL T8 1
0007 V8 = DO_ICALL
0008 T9 = SL V8 int(8)
0009 INIT_FCALL 1 96 string("ord")
0010 T8 = FETCH_DIM_R CV0($k) int(0)
0011 SEND_VAL T8 1
0012 V10 = DO_ICALL
0013 CV3($y) = ADD V10 T9
0014 CV4($x) = FETCH_DIM_R CV2($z) CV3($y)
0015 CV5($i) = QM_ASSIGN int(2)
0016 JMP 0054
0017 T8 = TYPE_CHECK (null) CV4($x)
0018 JMPZ T8 0022
0019 ASSIGN_DIM CV2($z) CV3($y)
0020 OP_DATA CV1($ki)
0021 RETURN bool(true)
0022 T8 = TYPE_CHECK (long) CV4($x)
0023 JMPZ T8 0045
0024 T9 = FETCH_OBJ_R THIS string("total")
0025 T8 = IS_SMALLER_OR_EQUAL T9 CV4($x)
0026 JMPZ T8 0030
0027 ASSIGN_DIM CV2($z) CV3($y)
0028 OP_DATA CV1($ki)
0029 RETURN bool(true)
0030 V8 = NEW 1 string("SplFixedArray")
0031 SEND_VAL_EX int(256) 1
0032 DO_FCALL
0033 ASSIGN CV6($b) V8
0034 T9 = FETCH_OBJ_R THIS string("hash")
0035 T8 = FETCH_DIM_R T9 CV4($x)
0036 ASSIGN CV7($a) T8
0037 INIT_FCALL 1 96 string("ord")
0038 T8 = FETCH_DIM_R CV7($a) CV5($i)
0039 SEND_VAL T8 1
0040 V8 = DO_ICALL
0041 ASSIGN_DIM CV6($b) V8
0042 OP_DATA CV4($x)
0043 ASSIGN_DIM CV2($z) CV3($y)
0044 OP_DATA CV6($b)
0045 V8 = FETCH_DIM_W CV2($z) CV3($y)
0046 ASSIGN_REF CV2($z) V8
0047 INIT_FCALL 1 96 string("ord")
0048 T8 = FETCH_DIM_R CV0($k) CV5($i)
0049 SEND_VAL T8 1
0050 CV3($y) = DO_ICALL
0051 T8 = FETCH_DIM_R CV2($z) CV3($y)
0052 ASSIGN CV4($x) T8
0053 PRE_INC CV5($i)
0054 T8 = IS_SMALLER CV5($i) int(16)
0055 JMPNZ T8 0017
0056 INIT_METHOD_CALL 2 THIS string("log")
0057 SEND_VAL string("hash collision") 1
0058 SEND_VAL int(1) 2
0059 DO_FCALL
0060 RETURN bool(false)
LIVE RANGES:
     8: 0031 - 0033 (new)

SM\Mustache::tokenize:
     ; (lines=372, args=2, vars=14, tmps=4)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:242-421
0000 CV0($delims) = RECV 1
0001 CV1($text) = RECV 2
0002 CV2($tokens) = QM_ASSIGN array(...)
0003 T15 = FETCH_DIM_R CV0($delims) int(0)
0004 CV3($size0) = STRLEN T15
0005 T15 = FETCH_DIM_R CV0($delims) int(1)
0006 CV4($size1) = STRLEN T15
0007 CV5($length) = STRLEN CV1($text)
0008 T14 = ASSIGN CV9($line) int(0)
0009 T14 = ASSIGN CV7($i0) int(0)
0010 CV6($i) = QM_ASSIGN int(0)
0011 JMP 0269
0012 INIT_FCALL 3 128 string("strpos")
0013 SEND_VAR CV1($text) 1
0014 SEND_VAL string("
") 2
0015 SEND_VAR CV7($i0) 3
0016 CV10($a) = DO_ICALL
0017 INIT_FCALL 3 128 string("strpos")
0018 SEND_VAR CV1($text) 1
0019 T14 = FETCH_DIM_R CV0($delims) int(0)
0020 SEND_VAL T14 2
0021 SEND_VAR CV7($i0) 3
0022 CV11($b) = DO_ICALL
0023 T14 = TYPE_CHECK (false) CV11($b)
0024 JMPZ T14 0073
0025 T14 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] CV10($a)
0026 JMPZ T14 0042
0027 T15 = POST_INC CV6($i)
0028 T14 = INIT_ARRAY 3 (packed) string("") NEXT
0029 INIT_FCALL 3 128 string("substr")
0030 SEND_VAR CV1($text) 1
0031 SEND_VAR CV7($i0) 2
0032 T17 = SUB CV10($a) CV7($i0)
0033 T16 = ADD T17 int(1)
0034 SEND_VAL T16 3
0035 V16 = DO_ICALL
0036 T14 = ADD_ARRAY_ELEMENT V16 NEXT
0037 T16 = POST_INC CV9($line)
0038 T14 = ADD_ARRAY_ELEMENT T16 NEXT
0039 ASSIGN_DIM CV2($tokens) T15
0040 OP_DATA T14
0041 CV7($i0) = ADD CV10($a) int(1)
0042 T15 = POST_INC CV6($i)
0043 T14 = INIT_ARRAY 3 (packed) string("") NEXT
0044 INIT_FCALL 2 112 string("substr")
0045 SEND_VAR CV1($text) 1
0046 SEND_VAR CV7($i0) 2
0047 V16 = DO_ICALL
0048 T14 = ADD_ARRAY_ELEMENT V16 NEXT
0049 T14 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0050 ASSIGN_DIM CV2($tokens) T15
0051 OP_DATA T14
0052 JMP 0271
0053 CV8($i1) = ADD CV10($a) int(1)
0054 T15 = POST_INC CV6($i)
0055 T14 = INIT_ARRAY 3 (packed) string("") NEXT
0056 INIT_FCALL 3 128 string("substr")
0057 SEND_VAR CV1($text) 1
0058 SEND_VAR CV7($i0) 2
0059 T16 = SUB CV8($i1) CV7($i0)
0060 SEND_VAL T16 3
0061 V16 = DO_ICALL
0062 T14 = ADD_ARRAY_ELEMENT V16 NEXT
0063 T16 = POST_INC CV9($line)
0064 T14 = ADD_ARRAY_ELEMENT T16 NEXT
0065 ASSIGN_DIM CV2($tokens) T15
0066 OP_DATA T14
0067 INIT_FCALL 3 128 string("strpos")
0068 SEND_VAR CV1($text) 1
0069 SEND_VAL string("
") 2
0070 T14 = ASSIGN CV7($i0) CV8($i1)
0071 SEND_VAL T14 3
0072 CV10($a) = DO_ICALL
0073 T14 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] CV10($a)
0074 JMPZ T14 0077
0075 T14 = IS_SMALLER CV10($a) CV11($b)
0076 JMPNZ T14 0053
0077 T14 = IS_SMALLER CV7($i0) CV11($b)
0078 JMPZ T14 0103
0079 INIT_FCALL 3 128 string("substr")
0080 SEND_VAR CV1($text) 1
0081 SEND_VAR CV7($i0) 2
0082 T14 = SUB CV11($b) CV7($i0)
0083 SEND_VAL T14 3
0084 V14 = DO_ICALL
0085 ASSIGN CV12($c) V14
0086 T15 = POST_INC CV6($i)
0087 T14 = INIT_ARRAY 3 (packed) string("") NEXT
0088 T14 = ADD_ARRAY_ELEMENT CV12($c) NEXT
0089 T14 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0090 ASSIGN_DIM CV2($tokens) T15
0091 OP_DATA T14
0092 INIT_FCALL 2 112 string("trim")
0093 SEND_VAR CV12($c) 1
0094 SEND_VAL string(" 	") 2
0095 V14 = DO_ICALL
0096 JMPZ V14 0099
0097 T14 = QM_ASSIGN int(-1)
0098 JMP 0100
0099 T14 = STRLEN CV12($c)
0100 CV13($indent) = QM_ASSIGN T14
0101 CV7($i0) = QM_ASSIGN CV11($b)
0102 JMP 0104
0103 CV13($indent) = QM_ASSIGN int(0)
0104 CV11($b) = ADD CV11($b) CV3($size0)
0105 INIT_FCALL 3 128 string("strpos")
0106 SEND_VAR CV1($text) 1
0107 T14 = FETCH_DIM_R CV0($delims) int(1)
0108 SEND_VAL T14 2
0109 SEND_VAR CV11($b) 3
0110 CV10($a) = DO_ICALL
0111 T14 = TYPE_CHECK (false) CV10($a)
0112 JMPNZ T14 0143
0113 INIT_FCALL 2 112 string("trim")
0114 INIT_FCALL 3 128 string("substr")
0115 SEND_VAR CV1($text) 1
0116 SEND_VAR CV11($b) 2
0117 T15 = SUB CV10($a) CV11($b)
0118 SEND_VAL T15 3
0119 V15 = DO_ICALL
0120 SEND_VAR V15 1
0121 SEND_VAL string(" ") 2
0122 V16 = DO_ICALL
0123 ASSIGN CV12($c) V16
0124 JMPZ CV12($c) 0143
0125 INIT_FCALL 1 96 string("ctype_alnum")
0126 T15 = FETCH_DIM_R CV12($c) int(0)
0127 SEND_VAL T15 1
0128 V15 = DO_ICALL
0129 JMPNZ V15 0137
0130 INIT_FCALL 2 112 string("strpos")
0131 SEND_VAL string("#^?|/.&!") 1
0132 T15 = FETCH_DIM_R CV12($c) int(0)
0133 SEND_VAL T15 2
0134 V15 = DO_ICALL
0135 T14 = TYPE_CHECK (false) V15
0136 JMPNZ T14 0143
0137 T16 = STRLEN CV12($c)
0138 T15 = IS_SMALLER int(32) T16
0139 JMPZ T15 0171
0140 T15 = FETCH_DIM_R CV12($c) int(0)
0141 T14 = IS_NOT_IDENTICAL T15 string("!")
0142 JMPZ T14 0171
0143 INIT_METHOD_CALL 2 THIS string("log")
0144 SEND_VAL string("false tag skipped") 1
0145 SEND_VAL int(0) 2
0146 DO_FCALL
0147 JMPZ CV6($i) 0162
0148 T14 = SUB CV6($i) int(1)
0149 T15 = FETCH_DIM_R CV2($tokens) T14
0150 T14 = FETCH_DIM_R T15 int(0)
0151 JMPNZ T14 0162
0152 INIT_FCALL 2 112 string("substr")
0153 T14 = SUB CV6($i) int(1)
0154 T15 = FETCH_DIM_R CV2($tokens) T14
0155 T14 = FETCH_DIM_R T15 int(1)
0156 SEND_VAL T14 1
0157 SEND_VAL int(-1) 2
0158 V15 = DO_ICALL
0159 T14 = IS_IDENTICAL V15 string("
")
0160 JMPZ T14 0162
0161 PRE_INC CV9($line)
0162 T15 = POST_INC CV6($i)
0163 T14 = INIT_ARRAY 3 (packed) string("") NEXT
0164 T16 = FETCH_DIM_R CV0($delims) int(0)
0165 T14 = ADD_ARRAY_ELEMENT T16 NEXT
0166 T14 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0167 ASSIGN_DIM CV2($tokens) T15
0168 OP_DATA T14
0169 CV7($i0) = QM_ASSIGN CV11($b)
0170 JMP 0269
0171 CV8($i1) = ADD CV10($a) CV4($size1)
0172 T14 = FETCH_DIM_R CV12($c) int(0)
0173 SWITCH_STRING T14 "#": 0188, "^": 0188, "?": 0188, "|": 0206, "/": 0224, "!": 0241, "&": 0249, default: 0260
0174 T15 = CASE T14 string("#")
0175 JMPNZ T15 0188
0176 T15 = CASE T14 string("^")
0177 JMPNZ T15 0188
0178 T15 = CASE T14 string("?")
0179 JMPNZ T15 0188
0180 T15 = CASE T14 string("|")
0181 JMPNZ T15 0206
0182 T15 = CASE T14 string("/")
0183 JMPNZ T15 0224
0184 T15 = CASE T14 string("!")
0185 JMPNZ T15 0241
0186 T15 = CASE T14 string("&")
0187 JMPZNZ T15 0260 0249
0188 T16 = POST_INC CV6($i)
0189 T17 = FETCH_DIM_R CV12($c) int(0)
0190 T15 = INIT_ARRAY 5 (packed) T17 NEXT
0191 INIT_FCALL 2 112 string("ltrim")
0192 INIT_FCALL 2 112 string("substr")
0193 SEND_VAR CV12($c) 1
0194 SEND_VAL int(1) 2
0195 V17 = DO_ICALL
0196 SEND_VAR V17 1
0197 SEND_VAL string(" ") 2
0198 V17 = DO_ICALL
0199 T15 = ADD_ARRAY_ELEMENT V17 NEXT
0200 T15 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0201 T15 = ADD_ARRAY_ELEMENT CV13($indent) NEXT
0202 T15 = ADD_ARRAY_ELEMENT CV8($i1) NEXT
0203 ASSIGN_DIM CV2($tokens) T16
0204 OP_DATA T15
0205 JMP 0267
0206 T16 = POST_INC CV6($i)
0207 T15 = INIT_ARRAY 6 (packed) string("|") NEXT
0208 INIT_FCALL 2 112 string("ltrim")
0209 INIT_FCALL 2 112 string("substr")
0210 SEND_VAR CV12($c) 1
0211 SEND_VAL int(1) 2
0212 V17 = DO_ICALL
0213 SEND_VAR V17 1
0214 SEND_VAL string(" ") 2
0215 V17 = DO_ICALL
0216 T15 = ADD_ARRAY_ELEMENT V17 NEXT
0217 T15 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0218 T15 = ADD_ARRAY_ELEMENT CV13($indent) NEXT
0219 T15 = ADD_ARRAY_ELEMENT CV7($i0) NEXT
0220 T15 = ADD_ARRAY_ELEMENT CV8($i1) NEXT
0221 ASSIGN_DIM CV2($tokens) T16
0222 OP_DATA T15
0223 JMP 0267
0224 T16 = POST_INC CV6($i)
0225 T15 = INIT_ARRAY 5 (packed) string("/") NEXT
0226 INIT_FCALL 2 112 string("ltrim")
0227 INIT_FCALL 2 112 string("substr")
0228 SEND_VAR CV12($c) 1
0229 SEND_VAL int(1) 2
0230 V17 = DO_ICALL
0231 SEND_VAR V17 1
0232 SEND_VAL string(" ") 2
0233 V17 = DO_ICALL
0234 T15 = ADD_ARRAY_ELEMENT V17 NEXT
0235 T15 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0236 T15 = ADD_ARRAY_ELEMENT CV13($indent) NEXT
0237 T15 = ADD_ARRAY_ELEMENT CV7($i0) NEXT
0238 ASSIGN_DIM CV2($tokens) T16
0239 OP_DATA T15
0240 JMP 0267
0241 T16 = POST_INC CV6($i)
0242 T15 = INIT_ARRAY 4 (packed) string("!") NEXT
0243 T15 = ADD_ARRAY_ELEMENT string("") NEXT
0244 T15 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0245 T15 = ADD_ARRAY_ELEMENT CV13($indent) NEXT
0246 ASSIGN_DIM CV2($tokens) T16
0247 OP_DATA T15
0248 JMP 0267
0249 T16 = FETCH_DIM_R CV12($c) int(0)
0250 INIT_FCALL 2 112 string("ltrim")
0251 INIT_FCALL 2 112 string("substr")
0252 SEND_VAR CV12($c) 1
0253 SEND_VAL int(1) 2
0254 V15 = DO_ICALL
0255 SEND_VAR V15 1
0256 SEND_VAL string(" ") 2
0257 V17 = DO_ICALL
0258 T15 = FAST_CONCAT T16 V17
0259 ASSIGN CV12($c) T15
0260 T16 = POST_INC CV6($i)
0261 T15 = INIT_ARRAY 4 (packed) string("_") NEXT
0262 T15 = ADD_ARRAY_ELEMENT CV12($c) NEXT
0263 T15 = ADD_ARRAY_ELEMENT CV9($line) NEXT
0264 T15 = ADD_ARRAY_ELEMENT CV13($indent) NEXT
0265 ASSIGN_DIM CV2($tokens) T16
0266 OP_DATA T15
0267 FREE T14
0268 CV7($i0) = QM_ASSIGN CV8($i1)
0269 T14 = IS_SMALLER CV7($i0) CV5($length)
0270 JMPNZ T14 0012
0271 T15 = ASSIGN CV4($size1) int(0)
0272 T14 = ASSIGN CV3($size0) int(0)
0273 CV9($line) = QM_ASSIGN int(0)
0274 CV5($length) = QM_ASSIGN CV6($i)
0275 CV6($i) = QM_ASSIGN int(0)
0276 JMP 0367
0277 T14 = IS_SMALLER CV6($i) CV5($length)
0278 JMPZ T14 0285
0279 T16 = FETCH_DIM_R CV2($tokens) CV6($i)
0280 T15 = FETCH_DIM_R T16 int(2)
0281 T14 = IS_IDENTICAL CV9($line) T15
0282 JMPZ T14 0285
0283 PRE_INC CV3($size0)
0284 JMP 0355
0285 JMPZ CV4($size1) 0348
0286 T15 = SUB CV3($size0) CV4($size1)
0287 ASSIGN CV12($c) T15
0288 JMPZ CV12($c) 0348
0289 T14 = IS_SMALLER_OR_EQUAL CV12($c) int(2)
0290 JMPZ T14 0348
0291 T14 = SUB CV6($i) CV3($size0)
0292 ASSIGN CV10($a) T14
0293 CV11($b) = SUB CV6($i) int(1)
0294 T14 = IS_IDENTICAL CV12($c) int(1)
0295 JMPZ T14 0324
0296 T15 = FETCH_DIM_R CV2($tokens) CV11($b)
0297 T14 = FETCH_DIM_R T15 int(0)
0298 JMPNZ T14 0309
0299 INIT_FCALL 1 96 string("ctype_space")
0300 T15 = FETCH_DIM_R CV2($tokens) CV11($b)
0301 T14 = FETCH_DIM_R T15 int(1)
0302 SEND_VAL T14 1
0303 V14 = DO_ICALL
0304 JMPZ V14 0309
0305 V14 = FETCH_DIM_W CV2($tokens) CV11($b)
0306 ASSIGN_DIM V14 int(1)
0307 OP_DATA string("")
0308 JMP 0348
0309 T14 = IS_IDENTICAL CV6($i) CV5($length)
0310 JMPZ T14 0348
0311 T15 = FETCH_DIM_R CV2($tokens) CV10($a)
0312 T14 = FETCH_DIM_R T15 int(0)
0313 JMPNZ T14 0348
0314 INIT_FCALL 1 96 string("ctype_space")
0315 T15 = FETCH_DIM_R CV2($tokens) CV10($a)
0316 T14 = FETCH_DIM_R T15 int(1)
0317 SEND_VAL T14 1
0318 V14 = DO_ICALL
0319 JMPZ V14 0348
0320 V14 = FETCH_DIM_W CV2($tokens) CV10($a)
0321 ASSIGN_DIM V14 int(1)
0322 OP_DATA string("")
0323 JMP 0369
0324 T15 = FETCH_DIM_R CV2($tokens) CV10($a)
0325 T14 = FETCH_DIM_R T15 int(0)
0326 JMPNZ T14 0348
0327 T15 = FETCH_DIM_R CV2($tokens) CV11($b)
0328 T14 = FETCH_DIM_R T15 int(0)
0329 JMPNZ T14 0348
0330 INIT_FCALL 1 96 string("ctype_space")
0331 T15 = FETCH_DIM_R CV2($tokens) CV10($a)
0332 T14 = FETCH_DIM_R T15 int(1)
0333 SEND_VAL T14 1
0334 V14 = DO_ICALL
0335 JMPZ V14 0348
0336 INIT_FCALL 1 96 string("ctype_space")
0337 T15 = FETCH_DIM_R CV2($tokens) CV11($b)
0338 T14 = FETCH_DIM_R T15 int(1)
0339 SEND_VAL T14 1
0340 V14 = DO_ICALL
0341 JMPZ V14 0348
0342 V15 = FETCH_DIM_W CV2($tokens) CV11($b)
0343 T14 = ASSIGN_DIM V15 int(1)
0344 OP_DATA string("")
0345 V15 = FETCH_DIM_W CV2($tokens) CV10($a)
0346 ASSIGN_DIM V15 int(1)
0347 OP_DATA T14
0348 T14 = IS_IDENTICAL CV6($i) CV5($length)
0349 JMPNZ T14 0369
0350 T15 = FETCH_DIM_R CV2($tokens) CV6($i)
0351 T14 = FETCH_DIM_R T15 int(2)
0352 ASSIGN CV9($line) T14
0353 CV3($size0) = QM_ASSIGN int(1)
0354 CV4($size1) = QM_ASSIGN int(0)
0355 T14 = FETCH_DIM_R CV2($tokens) CV6($i)
0356 T15 = FETCH_DIM_R T14 int(0)
0357 ASSIGN CV10($a) T15
0358 JMPZ CV10($a) 0366
0359 INIT_FCALL 2 112 string("strpos")
0360 SEND_VAL string("#^|/!") 1
0361 SEND_VAR CV10($a) 2
0362 V15 = DO_ICALL
0363 T14 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V15
0364 JMPZ T14 0366
0365 PRE_INC CV4($size1)
0366 PRE_INC CV6($i)
0367 T14 = IS_SMALLER_OR_EQUAL CV6($i) CV5($length)
0368 JMPNZ T14 0277
0369 ASSIGN_DIM CV2($tokens) NEXT
0370 OP_DATA null
0371 RETURN_BY_REF CV2($tokens)
LIVE RANGES:
     14: 0029 - 0039 (tmp/var)
     14: 0044 - 0050 (tmp/var)
     14: 0056 - 0065 (tmp/var)
     14: 0088 - 0090 (tmp/var)
     14: 0164 - 0167 (tmp/var)
     14: 0173 - 0267 (tmp/var)
     15: 0191 - 0203 (tmp/var)
     15: 0208 - 0221 (tmp/var)
     15: 0226 - 0238 (tmp/var)
     15: 0243 - 0246 (tmp/var)
     16: 0250 - 0258 (tmp/var)
     15: 0262 - 0265 (tmp/var)
     14: 0344 - 0346 (tmp/var)

SM\Mustache::parse:
     ; (lines=166, args=4, vars=9, tmps=4)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:423-507
0000 CV0($text) = RECV 1
0001 CV1($tokens) = RECV 2
0002 CV2($i) = RECV_INIT 3 int(0)
0003 CV3($p) = RECV_INIT 4 null
0004 BIND_STATIC (ref) CV4($NULL)
0005 JMPZ CV3($p) 0017
0006 T10 = FETCH_DIM_R CV3($p) int(0)
0007 T9 = IS_IDENTICAL T10 string("^")
0008 JMPZ T9 0011
0009 T9 = QM_ASSIGN int(0)
0010 JMP 0012
0011 T9 = QM_ASSIGN int(1)
0012 V10 = FETCH_DIM_W CV3($p) int(5)
0013 ASSIGN_DIM V10 NEXT
0014 OP_DATA T9
0015 CV5($from) = FETCH_DIM_R CV3($p) int(4)
0016 JMP 0018
0017 CV5($from) = QM_ASSIGN int(-1)
0018 CV6($tree) = QM_ASSIGN array(...)
0019 CV7($size) = QM_ASSIGN int(0)
0020 JMP 0148
0021 T9 = FETCH_DIM_R CV8($t) int(0)
0022 SWITCH_STRING T9 "#": 0033, "^": 0033, "?": 0033, "|": 0051, "/": 0100, default: 0142
0023 T10 = CASE T9 string("#")
0024 JMPNZ T10 0033
0025 T10 = CASE T9 string("^")
0026 JMPNZ T10 0033
0027 T10 = CASE T9 string("?")
0028 JMPNZ T10 0033
0029 T10 = CASE T9 string("|")
0030 JMPNZ T10 0051
0031 T10 = CASE T9 string("/")
0032 JMPZNZ T10 0142 0100
0033 ASSIGN_DIM CV8($t) int(5)
0034 OP_DATA array(...)
0035 INIT_METHOD_CALL 4 THIS string("parse")
0036 SEND_REF CV0($text) 1
0037 SEND_REF CV1($tokens) 2
0038 SEND_REF CV2($i) 3
0039 SEND_REF CV8($t) 4
0040 V10 = DO_FCALL
0041 JMPNZ V10 0045
0042 VERIFY_RETURN_TYPE CV4($NULL)
0043 FREE T9
0044 RETURN_BY_REF CV4($NULL)
0045 T10 = FETCH_DIM_R CV8($t) int(4)
0046 JMPZ T10 0147
0047 T11 = POST_INC CV7($size)
0048 V10 = FETCH_DIM_W CV6($tree) T11
0049 ASSIGN_REF V10 CV8($t)
0050 JMP 0147
0051 T10 = TYPE_CHECK (null) CV3($p)
0052 JMPZ T10 0065
0053 INIT_METHOD_CALL 2 THIS string("log")
0054 T11 = FETCH_DIM_R CV8($t) int(1)
0055 T10 = CONCAT string("unexpected: |") T11
0056 T11 = FAST_CONCAT T10 string(" at line ")
0057 T12 = FETCH_DIM_R CV8($t) int(2)
0058 T10 = CONCAT T11 T12
0059 SEND_VAL T10 1
0060 SEND_VAL int(1) 2
0061 DO_FCALL
0062 VERIFY_RETURN_TYPE CV4($NULL)
0063 FREE T9
0064 RETURN_BY_REF CV4($NULL)
0065 INIT_FCALL 3 128 string("substr")
0066 SEND_VAR CV0($text) 1
0067 SEND_VAR CV5($from) 2
0068 T11 = FETCH_DIM_R CV8($t) int(4)
0069 T10 = SUB T11 CV5($from)
0070 SEND_VAL T10 3
0071 V10 = DO_ICALL
0072 V11 = FETCH_DIM_W CV3($p) int(5)
0073 ASSIGN_DIM V11 NEXT
0074 OP_DATA V10
0075 V10 = FETCH_DIM_W CV3($p) int(5)
0076 ASSIGN_DIM V10 NEXT
0077 OP_DATA CV6($tree)
0078 T11 = FETCH_DIM_R CV8($t) int(1)
0079 T10 = STRLEN T11
0080 JMPZ T10 0085
0081 T10 = FETCH_DIM_R CV8($t) int(1)
0082 T11 = CONCAT string("'") T10
0083 T10 = FAST_CONCAT T11 string("'")
0084 JMP 0092
0085 INIT_NS_FCALL_BY_NAME 1 string("SM\abs")
0086 T11 = FETCH_DIM_R CV3($p) int(5)
0087 T12 = FETCH_DIM_R T11 int(0)
0088 T11 = SUB T12 int(1)
0089 SEND_VAL_EX T11 1
0090 V11 = DO_FCALL_BY_NAME
0091 T10 = QM_ASSIGN V11
0092 V11 = FETCH_DIM_W CV3($p) int(5)
0093 ASSIGN_DIM V11 NEXT
0094 OP_DATA T10
0095 T10 = FETCH_DIM_R CV8($t) int(5)
0096 ASSIGN CV5($from) T10
0097 ASSIGN CV6($tree) array(...)
0098 CV7($size) = QM_ASSIGN int(0)
0099 JMP 0147
0100 T10 = TYPE_CHECK (null) CV3($p)
0101 JMPNZ T10 0106
0102 T11 = FETCH_DIM_R CV8($t) int(1)
0103 T12 = FETCH_DIM_R CV3($p) int(1)
0104 T10 = IS_NOT_IDENTICAL T11 T12
0105 JMPZ T10 0118
0106 INIT_METHOD_CALL 2 THIS string("log")
0107 T11 = FETCH_DIM_R CV8($t) int(1)
0108 T10 = CONCAT string("unexpected: /") T11
0109 T11 = FAST_CONCAT T10 string(" at line ")
0110 T12 = FETCH_DIM_R CV8($t) int(2)
0111 T10 = CONCAT T11 T12
0112 SEND_VAL T10 1
0113 SEND_VAL int(1) 2
0114 DO_FCALL
0115 VERIFY_RETURN_TYPE CV4($NULL)
0116 FREE T9
0117 RETURN_BY_REF CV4($NULL)
0118 JMPZ CV7($size) 0137
0119 INIT_FCALL 3 128 string("substr")
0120 SEND_VAR CV0($text) 1
0121 SEND_VAR CV5($from) 2
0122 T11 = FETCH_DIM_R CV8($t) int(4)
0123 T10 = SUB T11 CV5($from)
0124 SEND_VAL T10 3
0125 V10 = DO_ICALL
0126 V11 = FETCH_DIM_W CV3($p) int(5)
0127 ASSIGN_DIM V11 NEXT
0128 OP_DATA V10
0129 V11 = FETCH_DIM_W CV3($p) int(5)
0130 V10 = FETCH_DIM_W V11 NEXT
0131 ASSIGN_REF V10 CV6($tree)
0132 T11 = FETCH_DIM_R CV3($p) int(5)
0133 T10 = COUNT T11
0134 ASSIGN_DIM CV3($p) int(4)
0135 OP_DATA T10
0136 JMP 0139
0137 ASSIGN_DIM CV3($p) int(4)
0138 OP_DATA int(0)
0139 VERIFY_RETURN_TYPE CV3($p)
0140 FREE T9
0141 RETURN_BY_REF CV3($p)
0142 T10 = FETCH_DIM_R CV8($t) int(1)
0143 JMPZ T10 0147
0144 T11 = POST_INC CV7($size)
0145 V10 = FETCH_DIM_W CV6($tree) T11
0146 ASSIGN_REF V10 CV8($t)
0147 FREE T9
0148 T9 = POST_INC CV2($i)
0149 V10 = FETCH_DIM_W CV1($tokens) T9
0150 V9 = ASSIGN_REF CV8($t) V10
0151 JMPNZ V9 0021
0152 T9 = TYPE_CHECK TYPE [bool, long, double, string, array, object, resource] CV3($p)
0153 JMPZ T9 0165
0154 INIT_METHOD_CALL 2 THIS string("log")
0155 T10 = FETCH_DIM_R CV3($p) int(1)
0156 T9 = CONCAT string("missing close: ") T10
0157 T10 = FAST_CONCAT T9 string(" at line ")
0158 T11 = FETCH_DIM_R CV3($p) int(2)
0159 T9 = CONCAT T10 T11
0160 SEND_VAL T9 1
0161 SEND_VAL int(1) 2
0162 DO_FCALL
0163 VERIFY_RETURN_TYPE CV4($NULL)
0164 RETURN_BY_REF CV4($NULL)
0165 RETURN_BY_REF CV6($tree)
LIVE RANGES:
     9: 0022 - 0147 (tmp/var)
     11: 0057 - 0058 (tmp/var)
     10: 0072 - 0073 (tmp/var)
     10: 0092 - 0093 (tmp/var)
     11: 0103 - 0104 (tmp/var)
     11: 0110 - 0111 (tmp/var)
     10: 0126 - 0127 (tmp/var)
     10: 0158 - 0159 (tmp/var)

SM\Mustache::compose:
     ; (lines=108, args=3, vars=7, tmps=6)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:509-551
0000 CV0($delims) = RECV 1
0001 CV1($tree) = RECV 2
0002 CV2($depth) = RECV 3
0003 CV3($code) = QM_ASSIGN string("")
0004 V7 = FE_RESET_RW CV1($tree) 0091
0005 FE_FETCH_RW V7 CV4($t) 0091
0006 T8 = FETCH_DIM_R CV4($t) int(0)
0007 SWITCH_STRING T8 "": 0018, "_": 0051, "#": 0056, "^": 0056, "?": 0056, default: 0089
0008 T9 = CASE T8 string("")
0009 JMPNZ T9 0018
0010 T9 = CASE T8 string("_")
0011 JMPNZ T9 0051
0012 T9 = CASE T8 string("#")
0013 JMPNZ T9 0056
0014 T9 = CASE T8 string("^")
0015 JMPNZ T9 0056
0016 T9 = CASE T8 string("?")
0017 JMPZNZ T9 0089 0056
0018 INIT_FCALL 2 112 string("strpos")
0019 T9 = FETCH_DIM_R CV4($t) int(1)
0020 SEND_VAL T9 1
0021 SEND_VAL string("\") 2
0022 V10 = DO_ICALL
0023 T9 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V10
0024 JMPZ T9 0033
0025 INIT_FCALL 3 128 string("str_replace")
0026 SEND_VAL string("\") 1
0027 SEND_VAL string("\\") 2
0028 T9 = FETCH_DIM_R CV4($t) int(1)
0029 SEND_VAL T9 3
0030 V9 = DO_ICALL
0031 ASSIGN_DIM CV4($t) int(1)
0032 OP_DATA V9
0033 INIT_FCALL 2 112 string("strpos")
0034 T9 = FETCH_DIM_R CV4($t) int(1)
0035 SEND_VAL T9 1
0036 SEND_VAL string("$") 2
0037 V10 = DO_ICALL
0038 T9 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V10
0039 JMPZ T9 0048
0040 INIT_FCALL 3 128 string("str_replace")
0041 SEND_VAL string("$") 1
0042 SEND_VAL string("\$") 2
0043 T9 = FETCH_DIM_R CV4($t) int(1)
0044 SEND_VAL T9 3
0045 V9 = DO_ICALL
0046 ASSIGN_DIM CV4($t) int(1)
0047 OP_DATA V9
0048 T9 = FETCH_DIM_R CV4($t) int(1)
0049 ASSIGN_OP (CONCAT) CV3($code) T9
0050 JMP 0089
0051 T9 = FETCH_DIM_R CV4($t) int(1)
0052 T10 = CONCAT string("{$x('") T9
0053 T9 = FAST_CONCAT T10 string("')}")
0054 ASSIGN_OP (CONCAT) CV3($code) T9
0055 JMP 0089
0056 ASSIGN CV5($x) string("")
0057 CV6($i) = QM_ASSIGN int(0)
0058 JMP 0078
0059 T9 = FETCH_DIM_R CV4($t) int(5)
0060 T10 = FETCH_DIM_R T9 CV6($i)
0061 T9 = CONCAT string(",") T10
0062 T10 = FAST_CONCAT T9 string(",")
0063 INIT_METHOD_CALL 4 THIS string("renderFunc")
0064 SEND_VAR CV0($delims) 1
0065 T12 = ADD CV6($i) int(1)
0066 V11 = FETCH_DIM_W CV4($t) int(5)
0067 V9 = FETCH_DIM_W V11 T12
0068 SEND_REF V9 2
0069 T12 = ADD CV6($i) int(2)
0070 V11 = FETCH_DIM_W CV4($t) int(5)
0071 V9 = FETCH_DIM_W V11 T12
0072 SEND_REF V9 3
0073 SEND_VAR CV2($depth) 4
0074 V11 = DO_FCALL
0075 T9 = CONCAT T10 V11
0076 ASSIGN_OP (CONCAT) CV5($x) T9
0077 CV6($i) = ADD CV6($i) int(3)
0078 T10 = FETCH_DIM_R CV4($t) int(4)
0079 T9 = IS_SMALLER CV6($i) T10
0080 JMPNZ T9 0059
0081 T10 = FETCH_DIM_R CV4($t) int(0)
0082 T9 = CONCAT string("{$x->f('") T10
0083 T11 = FETCH_DIM_R CV4($t) int(1)
0084 T10 = CONCAT T9 T11
0085 T9 = FAST_CONCAT T10 string("'")
0086 T10 = FAST_CONCAT T9 CV5($x)
0087 T9 = FAST_CONCAT T10 string(")}")
0088 ASSIGN_OP (CONCAT) CV3($code) T9
0089 FREE T8
0090 JMP 0005
0091 FE_FREE V7
0092 INIT_FCALL 2 112 string("strpos")
0093 SEND_VAR CV3($code) 1
0094 SEND_VAL string("
TEMPLATE") 2
0095 V8 = DO_ICALL
0096 T7 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V8
0097 JMPZ T7 0105
0098 INIT_FCALL 3 128 string("str_replace")
0099 SEND_VAL string("
TEMPLATE") 1
0100 SEND_VAL string("{$x}") 2
0101 SEND_VAR CV3($code) 3
0102 V8 = DO_ICALL
0103 T7 = QM_ASSIGN V8
0104 JMP 0106
0105 T7 = QM_ASSIGN CV3($code)
0106 VERIFY_RETURN_TYPE T7
0107 RETURN T7
LIVE RANGES:
     7: 0005 - 0091 (loop)
     8: 0007 - 0089 (tmp/var)
     10: 0063 - 0075 (tmp/var)
     9: 0083 - 0084 (tmp/var)
     7: 0106 - 0107 (tmp/var)

SM\MustacheContext::__construct:
     ; (lines=23, args=3, vars=3, tmps=3)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:557-571
0000 CV0($engine) = RECV 1
0001 CV1($delims) = RECV 2
0002 CV2($context) = RECV 3
0003 ASSIGN_OBJ THIS string("engine")
0004 OP_DATA CV0($engine)
0005 ASSIGN_OBJ THIS string("delims")
0006 OP_DATA CV1($delims)
0007 ASSIGN_OBJ THIS string("engine")
0008 OP_DATA CV0($engine)
0009 ASSIGN_OBJ THIS string("delims")
0010 OP_DATA CV1($delims)
0011 T3 = FETCH_OBJ_R CV0($engine) string("helper")
0012 JMPZ T3 0018
0013 V3 = FETCH_OBJ_W (ref) CV0($engine) string("helper")
0014 V4 = MAKE_REF V3
0015 V5 = FETCH_OBJ_W (dim write) THIS string("stack")
0016 V3 = FETCH_DIM_W V5 int(0)
0017 ASSIGN_REF V3 V4
0018 JMPZ CV2($context) 0022
0019 V4 = FETCH_OBJ_W (dim write) THIS string("stack")
0020 V3 = FETCH_DIM_W V4 int(1)
0021 ASSIGN_REF V3 CV2($context)
0022 RETURN null
LIVE RANGES:
     4: 0015 - 0017 (tmp/var)

SM\MustacheContext::__toString:
     ; (lines=3, args=0, vars=0, tmps=1)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:572-574
0000 T0 = FETCH_CLASS_CONSTANT string("SM\Mustache") string("TERMINUS")
0001 VERIFY_RETURN_TYPE T0
0002 RETURN T0
LIVE RANGES:
     0: 0001 - 0002 (tmp/var)

SM\MustacheContext::__invoke:
     ; (lines=112, args=1, vars=6, tmps=3)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:575-616
0000 CV0($name) = RECV 1
0001 T6 = FETCH_DIM_R CV0($name) int(0)
0002 CV1($tag) = IS_IDENTICAL T6 string("&")
0003 JMPZ CV1($tag) 0009
0004 INIT_FCALL 2 112 string("substr")
0005 SEND_VAR CV0($name) 1
0006 SEND_VAL int(1) 2
0007 V6 = DO_ICALL
0008 ASSIGN CV0($name) V6
0009 T6 = IS_IDENTICAL CV0($name) string(".")
0010 JMPZ T6 0015
0011 T8 = FETCH_OBJ_R THIS string("last")
0012 T7 = FETCH_OBJ_R THIS string("stack")
0013 T6 = FETCH_DIM_R T7 T8
0014 JMP 0019
0015 INIT_METHOD_CALL 1 THIS string("v")
0016 SEND_VAR CV0($name) 1
0017 V7 = DO_FCALL
0018 T6 = QM_ASSIGN V7
0019 CV2($v) = QM_ASSIGN T6
0020 JMPNZ CV2($v) 0027
0021 T6 = IS_IDENTICAL CV2($v) int(0)
0022 JMPZ T6 0025
0023 T6 = QM_ASSIGN string("0")
0024 JMP 0026
0025 T6 = QM_ASSIGN string("")
0026 RETURN T6
0027 INIT_FCALL 1 96 string("is_callable")
0028 SEND_VAR CV2($v) 1
0029 CV3($isFunc) = DO_ICALL
0030 JMPZ CV3($isFunc) 0043
0031 T6 = INSTANCEOF CV2($v) string("Closure")
0032 JMPZ T6 0038
0033 INIT_DYNAMIC_CALL 1 CV2($v)
0034 SEND_VAL_EX string("") 1
0035 V7 = DO_FCALL
0036 T6 = QM_ASSIGN V7
0037 JMP 0042
0038 INIT_USER_CALL 1 string("call_user_func") CV2($v)
0039 SEND_USER string("") 1
0040 V7 = DO_FCALL
0041 T6 = QM_ASSIGN V7
0042 ASSIGN CV2($v) T6
0043 T6 = TYPE_CHECK (string) CV2($v)
0044 JMPZ T6 0105
0045 JMPZ CV3($isFunc) 0087
0046 T7 = FETCH_OBJ_R THIS string("engine")
0047 T6 = FETCH_OBJ_R T7 string("recur")
0048 JMPZ T6 0087
0049 INIT_FCALL 2 112 string("strpos")
0050 SEND_VAR CV2($v) 1
0051 T7 = FETCH_OBJ_R THIS string("delims")
0052 T6 = FETCH_DIM_R T7 int(0)
0053 SEND_VAL T6 2
0054 V7 = DO_ICALL
0055 T6 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V7
0056 JMPZ T6 0087
0057 INIT_FCALL 2 112 string("strpos")
0058 SEND_VAR CV2($v) 1
0059 T8 = FETCH_OBJ_R THIS string("delims")
0060 T7 = FETCH_DIM_R T8 int(1)
0061 SEND_VAL T7 2
0062 V7 = DO_ICALL
0063 T6 = TYPE_CHECK TYPE [null, true, long, double, string, array, object, resource] V7
0064 JMPZ T6 0087
0065 T6 = FETCH_OBJ_R THIS string("engine")
0066 INIT_METHOD_CALL 2 T6 string("renderFunc")
0067 CHECK_FUNC_ARG 1
0068 V6 = FETCH_OBJ_FUNC_ARG (ref) THIS string("delims")
0069 SEND_FUNC_ARG V6 1
0070 SEND_VAR_EX CV2($v) 2
0071 V6 = DO_FCALL
0072 CV4($i) = QM_ASSIGN V6
0073 T6 = BW_NOT CV4($i)
0074 JMPZ T6 0084
0075 T6 = FETCH_OBJ_R THIS string("engine")
0076 T7 = FETCH_OBJ_R T6 string("func")
0077 T6 = FETCH_DIM_R T7 CV4($i)
0078 INIT_DYNAMIC_CALL 1 T6
0079 V6 = FETCH_THIS
0080 SEND_VAR_EX V6 1
0081 V7 = DO_FCALL
0082 T6 = QM_ASSIGN V7
0083 JMP 0085
0084 T6 = QM_ASSIGN string("")
0085 ASSIGN CV2($v) T6
0086 JMP 0103
0087 JMPNZ CV1($tag) 0103
0088 T6 = FETCH_OBJ_R THIS string("engine")
0089 CV5($f) = FETCH_OBJ_R T6 string("escaper")
0090 JMPZ CV5($f) 0103
0091 T6 = TYPE_CHECK (true) CV5($f)
0092 JMPZ T6 0098
0093 INIT_FCALL 1 96 string("htmlspecialchars")
0094 SEND_VAR CV2($v) 1
0095 V7 = DO_ICALL
0096 T6 = QM_ASSIGN V7
0097 JMP 0102
0098 INIT_DYNAMIC_CALL 1 CV5($f)
0099 SEND_VAR_EX CV2($v) 1
0100 V7 = DO_FCALL
0101 T6 = QM_ASSIGN V7
0102 ASSIGN CV2($v) T6
0103 VERIFY_RETURN_TYPE CV2($v)
0104 RETURN CV2($v)
0105 INIT_FCALL 1 96 string("is_numeric")
0106 SEND_VAR CV2($v) 1
0107 V6 = DO_ICALL
0108 JMPZ V6 0111
0109 T6 = CAST (string) CV2($v)
0110 RETURN T6
0111 RETURN string("")
LIVE RANGES:
     8: 0012 - 0013 (tmp/var)

SM\MustacheContext::f:
     ; (lines=244, args=1, vars=8, tmps=4)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:617-762
0000 CV0($name) = RECV 1
0001 CV1($sect) = RECV_VARIADIC 2
0002 CV2($e) = FETCH_OBJ_R THIS string("engine")
0003 CV3($k) = COUNT CV1($sect)
0004 CV4($type) = FETCH_DIM_R CV0($name) int(0)
0005 INIT_FCALL 2 112 string("substr")
0006 SEND_VAR CV0($name) 1
0007 SEND_VAL int(1) 2
0008 V8 = DO_ICALL
0009 ASSIGN CV0($name) V8
0010 T8 = IS_IDENTICAL CV0($name) string(".")
0011 JMPZ T8 0016
0012 T10 = FETCH_OBJ_R THIS string("last")
0013 T9 = FETCH_OBJ_R THIS string("stack")
0014 T8 = FETCH_DIM_R T9 T10
0015 JMP 0020
0016 INIT_METHOD_CALL 1 THIS string("v")
0017 SEND_VAR CV0($name) 1
0018 V9 = DO_FCALL
0019 T8 = QM_ASSIGN V9
0020 CV5($v) = QM_ASSIGN T8
0021 JMPNZ CV5($v) 0043
0022 T8 = IS_NOT_IDENTICAL CV5($v) string("0")
0023 JMPZ T8 0043
0024 CV6($i) = QM_ASSIGN int(0)
0025 JMP 0040
0026 T9 = FETCH_DIM_R CV1($sect) CV6($i)
0027 T8 = IS_IDENTICAL T9 int(0)
0028 JMPZ T8 0039
0029 T8 = ADD CV6($i) int(1)
0030 T10 = FETCH_DIM_R CV1($sect) T8
0031 T9 = FETCH_OBJ_R CV2($e) string("func")
0032 T8 = FETCH_DIM_R T9 T10
0033 INIT_DYNAMIC_CALL 1 T8
0034 V8 = FETCH_THIS
0035 SEND_VAR_EX V8 1
0036 V8 = DO_FCALL
0037 VERIFY_RETURN_TYPE V8
0038 RETURN V8
0039 CV6($i) = ADD CV6($i) int(2)
0040 T8 = IS_SMALLER CV6($i) CV3($k)
0041 JMPNZ T8 0026
0042 RETURN string("")
0043 INIT_FCALL 1 96 string("is_callable")
0044 SEND_VAR CV5($v) 1
0045 V8 = DO_ICALL
0046 JMPZ V8 0130
0047 T8 = IS_IDENTICAL CV3($k) int(2)
0048 JMPZ T8 0057
0049 INIT_USER_CALL 1 string("call_user_func") CV5($v)
0050 T10 = FETCH_DIM_R CV1($sect) int(1)
0051 T9 = FETCH_OBJ_R CV2($e) string("text")
0052 T8 = FETCH_DIM_R T9 T10
0053 SEND_USER T8 1
0054 V9 = DO_FCALL
0055 T8 = QM_ASSIGN V9
0056 JMP 0060
0057 INIT_USER_CALL 0 string("call_user_func") CV5($v)
0058 V9 = DO_FCALL
0059 T8 = QM_ASSIGN V9
0060 ASSIGN CV5($v) T8
0061 JMPNZ CV5($v) 0083
0062 T8 = IS_NOT_IDENTICAL CV5($v) string("0")
0063 JMPZ T8 0083
0064 CV6($i) = QM_ASSIGN int(0)
0065 JMP 0080
0066 T9 = FETCH_DIM_R CV1($sect) CV6($i)
0067 T8 = IS_IDENTICAL T9 int(0)
0068 JMPZ T8 0079
0069 T8 = ADD CV6($i) int(1)
0070 T10 = FETCH_DIM_R CV1($sect) T8
0071 T9 = FETCH_OBJ_R CV2($e) string("func")
0072 T8 = FETCH_DIM_R T9 T10
0073 INIT_DYNAMIC_CALL 1 T8
0074 V8 = FETCH_THIS
0075 SEND_VAR_EX V8 1
0076 V8 = DO_FCALL
0077 VERIFY_RETURN_TYPE V8
0078 RETURN V8
0079 CV6($i) = ADD CV6($i) int(2)
0080 T8 = IS_SMALLER CV6($i) CV3($k)
0081 JMPNZ T8 0066
0082 RETURN string("")
0083 T8 = IS_IDENTICAL CV3($k) int(2)
0084 JMPZ T8 0130
0085 T8 = FETCH_DIM_R CV1($sect) int(0)
0086 JMPNZ T8 0088
0087 RETURN string("")
0088 T8 = TYPE_CHECK (string) CV5($v)
0089 JMPZ T8 0130
0090 T8 = FETCH_OBJ_R CV2($e) string("recur")
0091 JMPZ T8 0108
0092 INIT_FCALL 2 112 string("strpos")
0093 SEND_VAR CV5($v) 1
0094 T9 = FETCH_OBJ_R THIS string("delims")
0095 T8 = FETCH_DIM_R T9 int(0)
0096 SEND_VAL T8 2
0097 V9 = DO_ICALL
0098 T8 = TYPE_CHECK (false) V9
0099 JMPNZ T8 0108
0100 INIT_FCALL 2 112 string("strpos")
0101 SEND_VAR CV5($v) 1
0102 T10 = FETCH_OBJ_R THIS string("delims")
0103 T9 = FETCH_DIM_R T10 int(1)
0104 SEND_VAL T9 2
0105 V9 = DO_ICALL
0106 T8 = TYPE_CHECK (false) V9
0107 JMPZ T8 0110
0108 VERIFY_RETURN_TYPE CV5($v)
0109 RETURN CV5($v)
0110 INIT_METHOD_CALL 2 CV2($e) string("renderFunc")
0111 CHECK_FUNC_ARG 1
0112 V8 = FETCH_OBJ_FUNC_ARG (ref) THIS string("delims")
0113 SEND_FUNC_ARG V8 1
0114 SEND_VAR_EX CV5($v) 2
0115 V8 = DO_FCALL
0116 CV6($i) = QM_ASSIGN V8
0117 T8 = BW_NOT CV6($i)
0118 JMPZ T8 0127
0119 T9 = FETCH_OBJ_R CV2($e) string("func")
0120 T8 = FETCH_DIM_R T9 CV6($i)
0121 INIT_DYNAMIC_CALL 1 T8
0122 V8 = FETCH_THIS
0123 SEND_VAR_EX V8 1
0124 V9 = DO_FCALL
0125 T8 = QM_ASSIGN V9
0126 JMP 0128
0127 T8 = QM_ASSIGN string("")
0128 VERIFY_RETURN_TYPE T8
0129 RETURN T8
0130 T8 = IS_IDENTICAL CV3($k) int(2)
0131 JMPZ T8 0138
0132 T9 = FETCH_DIM_R CV1($sect) int(0)
0133 T8 = IS_IDENTICAL T9 int(0)
0134 JMPZ T8 0136
0135 RETURN string("")
0136 CV6($i) = FETCH_DIM_R CV1($sect) int(1)
0137 JMP 0191
0138 T8 = IS_IDENTICAL CV3($k) int(4)
0139 JMPZ T8 0151
0140 T9 = FETCH_DIM_R CV1($sect) int(2)
0141 T8 = TYPE_CHECK (long) T9
0142 JMPZ T8 0151
0143 T9 = FETCH_DIM_R CV1($sect) int(0)
0144 T8 = IS_IDENTICAL T9 int(1)
0145 JMPZ T8 0148
0146 T8 = FETCH_DIM_R CV1($sect) int(1)
0147 JMP 0149
0148 T8 = FETCH_DIM_R CV1($sect) int(3)
0149 CV6($i) = QM_ASSIGN T8
0150 JMP 0191
0151 T8 = TYPE_CHECK TYPE [bool, long, double, string] CV5($v)
0152 JMPZ T8 0178
0153 CV7($x) = CAST (string) CV5($v)
0154 CV6($i) = QM_ASSIGN int(2)
0155 JMP 0160
0156 T9 = FETCH_DIM_R CV1($sect) CV6($i)
0157 T8 = IS_IDENTICAL CV7($x) T9
0158 JMPNZ T8 0162
0159 CV6($i) = ADD CV6($i) int(2)
0160 T8 = IS_SMALLER CV6($i) CV3($k)
0161 JMPNZ T8 0156
0162 T8 = IS_IDENTICAL CV6($i) CV3($k)
0163 JMPZ T8 0175
0164 CV6($i) = QM_ASSIGN int(0)
0165 JMP 0170
0166 T9 = FETCH_DIM_R CV1($sect) CV6($i)
0167 T8 = IS_IDENTICAL T9 int(1)
0168 JMPNZ T8 0172
0169 CV6($i) = ADD CV6($i) int(2)
0170 T8 = IS_SMALLER CV6($i) CV3($k)
0171 JMPNZ T8 0166
0172 T8 = IS_IDENTICAL CV6($i) CV3($k)
0173 JMPZ T8 0175
0174 RETURN string("")
0175 T9 = ADD CV6($i) int(1)
0176 CV6($i) = FETCH_DIM_R CV1($sect) T9
0177 JMP 0191
0178 CV6($i) = QM_ASSIGN int(0)
0179 JMP 0184
0180 T9 = FETCH_DIM_R CV1($sect) CV6($i)
0181 T8 = IS_IDENTICAL T9 int(1)
0182 JMPNZ T8 0186
0183 CV6($i) = ADD CV6($i) int(2)
0184 T8 = IS_SMALLER CV6($i) CV3($k)
0185 JMPNZ T8 0180
0186 T8 = IS_IDENTICAL CV6($i) CV3($k)
0187 JMPZ T8 0189
0188 RETURN string("")
0189 T9 = ADD CV6($i) int(1)
0190 CV6($i) = FETCH_DIM_R CV1($sect) T9
0191 T9 = FETCH_OBJ_R CV2($e) string("func")
0192 T8 = FETCH_DIM_R T9 CV6($i)
0193 ASSIGN CV1($sect) T8
0194 T8 = IS_IDENTICAL CV4($type) string("?")
0195 JMPZ T8 0202
0196 INIT_DYNAMIC_CALL 1 CV1($sect)
0197 V8 = FETCH_THIS
0198 SEND_VAR_EX V8 1
0199 V8 = DO_FCALL
0200 VERIFY_RETURN_TYPE V8
0201 RETURN V8
0202 T9 = TYPE_CHECK (array) CV5($v)
0203 ASSIGN CV7($x) T9
0204 JMPZ CV7($x) 0210
0205 INIT_FCALL 1 96 string("key")
0206 SEND_VAR CV5($v) 1
0207 V9 = DO_ICALL
0208 T8 = TYPE_CHECK (long) V9
0209 JMPNZ T8 0215
0210 JMPNZ CV7($x) 0232
0211 T9 = TYPE_CHECK (object) CV5($v)
0212 JMPZ T9 0232
0213 T8 = INSTANCEOF CV5($v) string("Traversable")
0214 JMPZ T8 0232
0215 CV7($x) = QM_ASSIGN string("")
0216 V8 = FE_RESET_RW CV5($v) 0229
0217 FE_FETCH_RW V8 CV6($i) 0229
0218 T11 = PRE_INC_OBJ THIS string("last")
0219 V10 = FETCH_OBJ_W (dim write) THIS string("stack")
0220 V9 = FETCH_DIM_W V10 T11
0221 ASSIGN_REF V9 CV6($i)
0222 INIT_DYNAMIC_CALL 1 CV1($sect)
0223 V9 = FETCH_THIS
0224 SEND_VAR_EX V9 1
0225 V9 = DO_FCALL
0226 ASSIGN_OP (CONCAT) CV7($x) V9
0227 PRE_DEC_OBJ THIS string("last")
0228 JMP 0217
0229 FE_FREE V8
0230 UNSET_CV CV6($i)
0231 JMP 0242
0232 T10 = PRE_INC_OBJ THIS string("last")
0233 V9 = FETCH_OBJ_W (dim write) THIS string("stack")
0234 V8 = FETCH_DIM_W V9 T10
0235 ASSIGN_REF V8 CV5($v)
0236 INIT_DYNAMIC_CALL 1 CV1($sect)
0237 V8 = FETCH_THIS
0238 SEND_VAR_EX V8 1
0239 V8 = DO_FCALL
0240 CV7($x) = QM_ASSIGN V8
0241 PRE_DEC_OBJ THIS string("last")
0242 VERIFY_RETURN_TYPE CV7($x)
0243 RETURN CV7($x)
LIVE RANGES:
     10: 0013 - 0014 (tmp/var)
     10: 0031 - 0032 (tmp/var)
     8: 0037 - 0038 (tmp/var)
     10: 0051 - 0052 (tmp/var)
     10: 0071 - 0072 (tmp/var)
     8: 0077 - 0078 (tmp/var)
     8: 0128 - 0129 (tmp/var)
     8: 0200 - 0201 (tmp/var)
     8: 0217 - 0229 (loop)
     11: 0219 - 0220 (tmp/var)
     10: 0233 - 0234 (tmp/var)

SM\MustacheContext::v:
     ; (lines=128, args=1, vars=5, tmps=2)
     ; (after optimizer)
     ; E:\lab\sm-mustache\mustache.php:763-868
0000 CV0($name) = RECV 1
0001 INIT_FCALL 2 112 string("strpos")
0002 SEND_VAR CV0($name) 1
0003 SEND_VAL string(".") 2
0004 V6 = DO_ICALL
0005 T5 = TYPE_CHECK (false) V6
0006 JMPZ T5 0009
0007 CV1($dots) = QM_ASSIGN null
0008 JMP 0018
0009 INIT_FCALL 2 112 string("explode")
0010 SEND_VAL string(".") 1
0011 SEND_VAR CV0($name) 2
0012 V5 = DO_ICALL
0013 CV1($dots) = QM_ASSIGN V5
0014 INIT_FCALL 1 96 string("array_shift")
0015 SEND_REF CV1($dots) 1
0016 V5 = DO_ICALL
0017 ASSIGN CV0($name) V5
0018 CV2($v) = QM_ASSIGN string("")
0019 CV3($i) = FETCH_OBJ_R THIS string("last")
0020 JMP 0056
0021 V5 = FETCH_OBJ_W (dim write) THIS string("stack")
0022 V6 = FETCH_DIM_W V5 CV3($i)
0023 V5 = ASSIGN_REF CV4($x) V6
0024 JMPZ V5 0055
0025 T5 = TYPE_CHECK (array) CV4($x)
0026 JMPZ T5 0032
0027 T5 = ARRAY_KEY_EXISTS CV0($name) CV4($x)
0028 JMPZ T5 0055
0029 V5 = FETCH_DIM_W CV4($x) CV0($name)
0030 ASSIGN_REF CV2($v) V5
0031 JMP 0058
0032 T5 = TYPE_CHECK (object) CV4($x)
0033 JMPZ T5 0055
0034 T5 = ISSET_ISEMPTY_PROP_OBJ (isset) CV4($x) CV0($name)
0035 JMPZ T5 0039
0036 T5 = FETCH_OBJ_R CV4($x) CV0($name)
0037 ASSIGN CV2($v) T5
0038 JMP 0058
0039 INIT_FCALL 2 112 string("method_exists")
0040 SEND_VAR CV4($x) 1
0041 SEND_VAR CV0($name) 2
0042 V5 = DO_ICALL
0043 JMPZ V5 0055
0044 JMPNZ CV1($dots) 0051
0045 INIT_STATIC_METHOD_CALL 1 string("Closure") string("fromCallable")
0046 T5 = INIT_ARRAY 2 (packed) CV4($x) NEXT
0047 T5 = ADD_ARRAY_ELEMENT CV0($name) NEXT
0048 SEND_VAL T5 1
0049 V5 = DO_FCALL
0050 RETURN V5
0051 INIT_METHOD_CALL 0 CV4($x) CV0($name)
0052 V5 = DO_FCALL
0053 ASSIGN CV2($v) V5
0054 JMP 0058
0055 PRE_DEC CV3($i)
0056 T5 = IS_SMALLER_OR_EQUAL int(0) CV3($i)
0057 JMPNZ T5 0021
0058 JMPZ CV2($v) 0060
0059 JMPNZ CV1($dots) 0061
0060 RETURN CV2($v)
0061 INIT_FCALL 1 96 string("array_pop")
0062 SEND_REF CV1($dots) 1
0063 V5 = DO_ICALL
0064 ASSIGN CV0($name) V5
0065 V5 = FE_RESET_R CV1($dots) 0102
0066 FE_FETCH_R V5 CV3($i) 0102
0067 T6 = TYPE_CHECK (array) CV2($v)
0068 JMPZ T6 0084
0069 T6 = ISSET_ISEMPTY_DIM_OBJ (isset) CV2($v) CV3($i)
0070 JMPZ T6 0100
0071 INIT_FCALL 1 96 string("is_callable")
0072 T6 = FETCH_DIM_R CV2($v) CV3($i)
0073 SEND_VAL T6 1
0074 V6 = DO_ICALL
0075 JMPZ V6 0081
0076 T6 = FETCH_DIM_R CV2($v) CV3($i)
0077 INIT_DYNAMIC_CALL 0 T6
0078 V6 = DO_FCALL
0079 ASSIGN_REF (function) CV2($v) V6
0080 JMP 0066
0081 V6 = FETCH_DIM_W CV2($v) CV3($i)
0082 ASSIGN_REF CV2($v) V6
0083 JMP 0066
0084 T6 = TYPE_CHECK (object) CV2($v)
0085 JMPZ T6 0100
0086 T6 = ISSET_ISEMPTY_PROP_OBJ (isset) CV2($v) CV0($name)
0087 JMPZ T6 0091
0088 V6 = FETCH_OBJ_W (ref) CV2($v) CV0($name)
0089 ASSIGN_REF CV2($v) V6
0090 JMP 0066
0091 INIT_FCALL 2 112 string("method_exists")
0092 SEND_VAR CV0($name) 1
0093 SEND_VAR CV2($v) 2
0094 V6 = DO_ICALL
0095 JMPZ V6 0100
0096 INIT_METHOD_CALL 0 CV2($v) CV0($name)
0097 V6 = DO_FCALL
0098 ASSIGN_REF (function) CV2($v) V6
0099 JMP 0066
0100 FE_FREE V5
0101 RETURN string("")
0102 FE_FREE V5
0103 T5 = TYPE_CHECK (array) CV2($v)
0104 JMPZ T5 0110
0105 T5 = ISSET_ISEMPTY_DIM_OBJ (isset) CV2($v) CV0($name)
0106 JMPZ T5 0109
0107 T5 = FETCH_DIM_R CV2($v) CV0($name)
0108 RETURN T5
0109 RETURN string("")
0110 T5 = TYPE_CHECK (object) CV2($v)
0111 JMPZ T5 0127
0112 T5 = ISSET_ISEMPTY_PROP_OBJ (isset) CV2($v) CV0($name)
0113 JMPZ T5 0116
0114 T5 = FETCH_OBJ_R CV2($v) CV0($name)
0115 RETURN T5
0116 INIT_FCALL 2 112 string("method_exists")
0117 SEND_VAR CV0($name) 1
0118 SEND_VAR CV2($v) 2
0119 V5 = DO_ICALL
0120 JMPZ V5 0127
0121 INIT_STATIC_METHOD_CALL 1 string("Closure") string("fromCallable")
0122 T5 = INIT_ARRAY 2 (packed) CV2($v) NEXT
0123 T5 = ADD_ARRAY_ELEMENT CV0($name) NEXT
0124 SEND_VAL T5 1
0125 V5 = DO_FCALL
0126 RETURN V5
0127 RETURN string("")
LIVE RANGES:
     5: 0047 - 0048 (tmp/var)
     5: 0066 - 0102 (loop)
     5: 0123 - 0124 (tmp/var)
